<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2014 (http://www.altova.com) by Kris De Meyer (KCL) -->
<!-- Copyright: (C) 2013 King's College London -->
<!-- Authors: Kris De Meyer -->
<!-- CopyPolicy: Released under the terms of the LGPLv2.1 or later -->
<xs:schema xmlns="http://darwin-project.eu/namespaces/TypeSafeBottle" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://darwin-project.eu/namespaces/TypeSafeBottle" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="Bottles">
		<xs:annotation>
			<xs:documentation>A list of message definition formats for communication over yarp Ports, implemented as yarp::os::Bottle objects but with type-safe member access</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Namespace" type="Namespace" minOccurs="0"/>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element name="Vector">
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="VectorBottle">
									<xs:attribute name="className" type="ClassName" use="required"/>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="Struct">
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="StructBottle">
									<xs:attribute name="className" type="ClassName" use="required"/>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
						<xs:unique name="UniqueFieldName">
							<xs:selector xpath="*"/>
							<xs:field xpath="@name"/>
						</xs:unique>
						<xs:unique name="NoRecursion">
							<xs:selector xpath="."/>
							<xs:field xpath="@className"/>
						</xs:unique>
					</xs:element>
					<xs:element name="Wrapper">
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="WrapperBottle">
									<xs:attribute name="className" type="ClassName" use="required"/>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
						<xs:unique name="UniqueSubID">
							<xs:selector xpath="Bottle"/>
							<xs:field xpath="@subID"/>
						</xs:unique>
					</xs:element>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="Namespace" mixed="false">
		<xs:annotation>
			<xs:documentation>Definition of C++ namespaces in which the Bottles live</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0">
			<xs:element name="Namespace" type="Namespace" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="name" type="ValidCName" use="required"/>
	</xs:complexType>
	<xs:complexType name="WrapperBottle" mixed="false">
		<xs:annotation>
			<xs:documentation>A bottle that can be used to wrap different types of bottles to be sent over the same port, each with its own subID that defines its class. SubIDs are of Yarp Vocab type (see Yarp documentation).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Bottle" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="subID" type="YarpVocab" use="required"/>
					<xs:attribute name="valueType" type="DefinedTypeName" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StructBottle" mixed="false">
		<xs:annotation>
			<xs:documentation>A bottle that contains a number of different data types, but whose name and type is known beforehand.</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Variable">
				<xs:complexType>
					<xs:attribute name="name" type="ValidCName" use="required"/>
					<xs:attribute name="type" type="ValueTypeName" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="Vector">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="VectorBottle">
							<xs:attribute name="name" type="ValidCName" use="required"/>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="VectorBottle" mixed="false">
		<xs:annotation>
			<xs:documentation>A bottle that contains an arbitrary number of elements, all of the same type.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="valueType" type="ValueTypeName" use="required"/>
	</xs:complexType>
	<xs:simpleType name="ValueTypeName">
		<xs:annotation>
			<xs:documentation>Either a Yarp typename or a reference to a className ID defined in the same XML document</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="YarpTypeName DefinedTypeName"/>
	</xs:simpleType>
	<xs:simpleType name="YarpTypeName" final="">
		<xs:annotation>
			<xs:documentation>The builtin types supported as datatypes in Yarp Bottles</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NCName">
			<xs:enumeration value="int"/>
			<xs:enumeration value="double"/>
			<xs:enumeration value="string"/>
			<xs:enumeration value="vocab"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DefinedTypeName" final="">
		<xs:annotation>
			<xs:documentation>A type derived from xs:IDREF with same constraints as ClassNameType</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:IDREF">
			<xs:pattern value="[\i-[:]][(\i|\d)-[:]]*"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ClassName">
		<xs:annotation>
			<xs:documentation>A type derived from xs:ID, with constraints to only allow valid C++ class names</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:ID">
			<xs:pattern value="[\i-[:]][(\i|\d)-[:]]*"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ValidCName">
		<xs:annotation>
			<xs:documentation>Puts constraints on the allowed characters to only allow valid C++ variable names</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[\i-[:]][(\i|\d)-[:]]*"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="YarpVocab">
		<xs:annotation>
			<xs:documentation>String of length 1-4, see Yarp documentation</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
			<xs:maxLength value="4"/>
			<xs:pattern value="[\i-[:]][(\i|\d)-[:]]*"/>
			<xs:pattern value=""/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
